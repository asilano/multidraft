require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DraftsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Draft. As you add validations to Draft, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: 'Test One' }
  }

  let(:invalid_attributes) {
    { name: nil }
  }

  context "when not signed in" do
    describe "GET #index" do
      it "assigns all drafts as @drafts" do
        draft = Draft.create! valid_attributes
        get :index, {}
        expect(assigns(:drafts)).to eq([draft])
      end
    end

    describe "GET #new" do
      it "redirects to the login page" do
        get :new, {}
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    describe "GET #show" do
      it "redirects to the login page" do
        draft = Draft.create! valid_attributes
        get :show, {:id => draft.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    describe "POST #create" do
      it "redirects to the login page" do
        post :create, {:draft => valid_attributes}
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    describe 'DELETE #destroy' do
      it "redirects to the login page" do
        draft = Draft.create! valid_attributes
        delete :destroy, {:id => draft.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  context "when signed in" do
    before(:each) { login_user }

    describe "GET #index" do
      it "assigns all drafts as @drafts" do
        draft = Draft.create! valid_attributes
        get :index, {}
        expect(assigns(:drafts)).to eq([draft])
      end
    end

    describe "GET #show" do
      it "assigns the requested draft as @draft" do
        draft = Draft.create! valid_attributes
        get :show, {:id => draft.to_param}
        expect(assigns(:draft)).to eq(draft)
      end
    end

    describe "GET #new" do
      it "assigns a new draft as @draft" do
        get :new, {}
        expect(assigns(:draft)).to be_a_new(Draft)
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Draft" do
          expect {
            post :create, {:draft => valid_attributes}
          }.to change(Draft, :count).by(1)
        end

        it "assigns a newly created draft as @draft" do
          post :create, {:draft => valid_attributes}
          expect(assigns(:draft)).to be_a(Draft)
          expect(assigns(:draft)).to be_persisted
        end

        it "redirects to the created draft" do
          post :create, {:draft => valid_attributes}
          expect(response).to redirect_to(Draft.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved draft as @draft" do
          post :create, {:draft => invalid_attributes}
          expect(assigns(:draft)).to be_a_new(Draft)
        end

        it "re-renders the 'new' template" do
          post :create, {:draft => invalid_attributes}
          expect(response).to render_template("new")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested draft" do
        draft = Draft.create! valid_attributes
        expect {
          delete :destroy, {:id => draft.to_param}
        }.to change(Draft, :count).by(-1)
      end

      it "redirects to the drafts list" do
        draft = Draft.create! valid_attributes
        delete :destroy, {:id => draft.to_param}
        expect(response).to redirect_to(drafts_path)
      end
    end
  end

end
